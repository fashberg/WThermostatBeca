; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = WThermostat
build_dir = .pioenvs
build_cache_dir = .pio/cache
extra_configs = platformio_override.ini
default_envs = wthermostat

[common]
# appversion is just devel, during github-actions its set to branch-date-hash or tagname by platformio_override.ini 
# you can set your own in your local platformio_override.ini (see platformio_override.sample.ini)
appversion = 1.23.dev
framework = arduino
board = esp01_1m
board_build.flash_mode = dout
board_build.ldscript = eagle.flash.1m.ld
platform = https://github.com/platformio/platform-espressif8266.git
platform_packages = platformio/framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git
build_flags = 
	-mtarget-align
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
	-DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
	-DVTABLES_IN_FLASH
	-DFP_IN_IROM
	-Os
	-fno-exceptions
	-lstdc++
	-Wl,-Map,firmware.map
	-DMIMETYPE_MINIMAL
	-Wno-format
	-Wall
build_unflags = 
board_build.f_cpu = 80000000L
board_build.f_flash = 40000000L
monitor_speed = 9600
upload_speed = 115200
upload_resetmethod = nodemcu
upload_port = COM4
extra_scripts = ${scripts_defaults.extra_scripts}
lib_deps = 
	ESP8266WiFi
	ottowinter/ESPAsyncTCP-esphome@^1.2.3
	esphome/AsyncTCP-esphome@^2.0.0
	esphome/ESPAsyncWebServer-esphome@^3.0.0
	ESP8266mDNS
	DNSServer
	EEPROM
	paulstoffregen/Time@^1.6.1
	NTPClient@3.2.1
	Hash

check_tool = 
	clangtidy
	#cppcheck
check_flags =
	cppcheck: --std=c++14 --platform=unix32 --enable=all --inline-suppr
	clangtidy: -extra-arg=-std=c++14 --checks=*,-fuchsia-trailing-return,-llvm-header-guard,-modernize-use-nodiscard,-cppcoreguidelines-avoid-magic-numbers,-readability-magic-numbers
check_severity = low, medium, high

[scripts_defaults]
extra_scripts = 
	pio/strip-floats.py
	pio/name-firmware.py


[env]
platform = ${common.platform}
platform_packages = ${common.platform_packages}
framework = ${common.framework}
board = ${common.board}
board_build.ldscript = ${common.board_build.ldscript}
board_build.flash_mode = ${common.board_build.flash_mode}
board_build.f_cpu = ${common.board_build.f_cpu}
build_unflags = ${common.build_unflags}
build_flags = ${common.build_flags}
	-DVERSION='"${common.appversion}"'
monitor_speed = ${common.monitor_speed}
upload_port = ${common.upload_port}
upload_resetmethod = ${common.upload_resetmethod}
upload_speed = ${common.upload_speed}
extra_scripts = ${common.extra_scripts}
lib_deps = ${common.lib_deps}
check_tool = ${common.check_tool}
check_flags = ${common.check_flags}
check_severity = ${common.check_severity}


# this is the default production env
[env:wthermostat]
build_type = release
build_flags = ${env.build_flags}
upload_protocol = custom
upload_command = python pio/espupload.py -u 10.10.200.80 -f $SOURCE
lib_deps = ${env.lib_deps}

# this is the minimal version. No MQTT and no Thermostat Support.
# meant for OTA Upgrading when standard is too small.
# After flashing minimal do an upgrade to normal
[env:wthermostat-minimal]
build_type = release
build_flags = ${env.build_flags}
	-D NDEBUG -D MINIMAL
lib_deps = 
	esphome/ESPAsyncWebServer-esphome@^3.0.0
	paulstoffregen/Time@^1.6.1
	NTPClient@3.2.1

# this is the debug version
# do NOT install to real thermostat hardware
# it's meant for flashing to nodemcu for development/testing
[env:wthermostat-debug]
board = nodemcuv2
build_type = debug
monitor_speed = 115200
upload_speed = 921600
build_flags = ${env.build_flags} -DDEBUG
lib_deps = ${env.lib_deps}
